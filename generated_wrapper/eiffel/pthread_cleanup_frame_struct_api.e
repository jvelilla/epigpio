note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class PTHREAD_CLEANUP_FRAME_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	cancel_routine: POINTER
			-- Access member `__cancel_routine`
		require
			exists: exists
		do
			Result := c_cancel_routine (item)
		ensure
			result_correct: Result = c_cancel_routine (item)
		end

	set_cancel_routine (a_value: POINTER) 
			-- Change the value of member `__cancel_routine` to `a_value`.
		require
			exists: exists
		do
			set_c_cancel_routine (item, a_value)
		ensure
			cancel_routine_set: a_value = cancel_routine
		end

	cancel_arg: POINTER
			-- Access member `__cancel_arg`
		require
			exists: exists
		do
			Result := c_cancel_arg (item)
		ensure
			result_correct: Result = c_cancel_arg (item)
		end

	set_cancel_arg (a_value: POINTER) 
			-- Change the value of member `__cancel_arg` to `a_value`.
		require
			exists: exists
		do
			set_c_cancel_arg (item, a_value)
		ensure
			cancel_arg_set: a_value = cancel_arg
		end

	do_it: INTEGER
			-- Access member `__do_it`
		require
			exists: exists
		do
			Result := c_do_it (item)
		ensure
			result_correct: Result = c_do_it (item)
		end

	set_do_it (a_value: INTEGER) 
			-- Change the value of member `__do_it` to `a_value`.
		require
			exists: exists
		do
			set_c_do_it (item, a_value)
		ensure
			do_it_set: a_value = do_it
		end

	cancel_type: INTEGER
			-- Access member `__cancel_type`
		require
			exists: exists
		do
			Result := c_cancel_type (item)
		ensure
			result_correct: Result = c_cancel_type (item)
		end

	set_cancel_type (a_value: INTEGER) 
			-- Change the value of member `__cancel_type` to `a_value`.
		require
			exists: exists
		do
			set_c_cancel_type (item, a_value)
		ensure
			cancel_type_set: a_value = cancel_type
		end

feature {NONE} -- Implementation wrapper for struct struct __pthread_cleanup_frame

	sizeof_external: INTEGER 
		external
			"C inline use <pigpio.h>"
		alias
			"sizeof(struct __pthread_cleanup_frame)"
		end

	c_cancel_routine (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__cancel_routine
			]"
		end

	set_c_cancel_routine (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__cancel_routine =  (void (*) (void *anonymous_1))$a_value
			]"
		ensure
			cancel_routine_set: a_value = c_cancel_routine (an_item)
		end

	c_cancel_arg (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__cancel_arg
			]"
		end

	set_c_cancel_arg (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__cancel_arg =  (void*)$a_value
			]"
		ensure
			cancel_arg_set: a_value = c_cancel_arg (an_item)
		end

	c_do_it (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__do_it
			]"
		end

	set_c_do_it (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__do_it =  (int)$a_value
			]"
		ensure
			do_it_set: a_value = c_do_it (an_item)
		end

	c_cancel_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__cancel_type
			]"
		end

	set_c_cancel_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct __pthread_cleanup_frame*)$an_item)->__cancel_type =  (int)$a_value
			]"
		ensure
			cancel_type_set: a_value = c_cancel_type (an_item)
		end

end
