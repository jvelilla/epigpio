note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class TIME_FUNCTIONS_API


feature -- Access

	clock: INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return clock ();
			]"
		end

	time (timer: POINTER): INTEGER 
		do
			Result := c_time (timer)
		ensure
			instance_free: class
		end

	difftime (time1: INTEGER; time0: INTEGER): REAL_64
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return difftime ((time_t)$time1, (time_t)$time0);
			]"
		end

	mktime (tp: TM_STRUCT_API): INTEGER 
		do
			Result := c_mktime (tp.item)
		ensure
			instance_free: class
		end

	strftime (s: STRING_8; maxsize: INTEGER; format: STRING_8; tp: TM_STRUCT_API): INTEGER 
		local
			s_c_string: C_STRING
			format_c_string: C_STRING
		do
			create s_c_string.make (s)
			create format_c_string.make (format)
			Result := c_strftime (s_c_string.item, maxsize, format_c_string.item, tp.item)
		ensure
			instance_free: class
		end

	strftime_l (s: STRING_8; maxsize: INTEGER; format: STRING_8; tp: TM_STRUCT_API; loc: LOCALE_STRUCT_STRUCT_API): INTEGER 
		local
			s_c_string: C_STRING
			format_c_string: C_STRING
		do
			create s_c_string.make (s)
			create format_c_string.make (format)
			Result := c_strftime_l (s_c_string.item, maxsize, format_c_string.item, tp.item, loc.item)
		ensure
			instance_free: class
		end

	gmtime (timer: POINTER): detachable TM_STRUCT_API 
		do
			if attached c_gmtime (timer) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	localtime (timer: POINTER): detachable TM_STRUCT_API 
		do
			if attached c_localtime (timer) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	gmtime_r (timer: POINTER; tp: TM_STRUCT_API): detachable TM_STRUCT_API 
		do
			if attached c_gmtime_r (timer, tp.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	localtime_r (timer: POINTER; tp: TM_STRUCT_API): detachable TM_STRUCT_API 
		do
			if attached c_localtime_r (timer, tp.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	asctime (tp: TM_STRUCT_API): POINTER 
		do
			Result := c_asctime (tp.item)
		ensure
			instance_free: class
		end

	ctime (timer: POINTER): POINTER 
		do
			Result := c_ctime (timer)
		ensure
			instance_free: class
		end

	asctime_r (tp: TM_STRUCT_API; buf: STRING_8): POINTER 
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			Result := c_asctime_r (tp.item, buf_c_string.item)
		ensure
			instance_free: class
		end

	ctime_r (timer: POINTER; buf: STRING_8): POINTER 
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			Result := c_ctime_r (timer, buf_c_string.item)
		ensure
			instance_free: class
		end

	tzset
		external
			"C inline use <pigpio.h>"
		alias
			"[
				tzset ();
			]"
		end

	stime (a_when: POINTER): INTEGER 
		do
			Result := c_stime (a_when)
		ensure
			instance_free: class
		end

	timegm (tp: TM_STRUCT_API): INTEGER 
		do
			Result := c_timegm (tp.item)
		ensure
			instance_free: class
		end

	timelocal (tp: TM_STRUCT_API): INTEGER 
		do
			Result := c_timelocal (tp.item)
		ensure
			instance_free: class
		end

	dysize (year: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return dysize ((int)$year);
			]"
		end

	nanosleep (requested_time: TIMESPEC_STRUCT_API; remaining: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_nanosleep (requested_time.item, remaining.item)
		ensure
			instance_free: class
		end

	clock_getres (clock_id: INTEGER; res: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_clock_getres (clock_id, res.item)
		ensure
			instance_free: class
		end

	clock_gettime (clock_id: INTEGER; tp: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_clock_gettime (clock_id, tp.item)
		ensure
			instance_free: class
		end

	clock_settime (clock_id: INTEGER; tp: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_clock_settime (clock_id, tp.item)
		ensure
			instance_free: class
		end

	clock_nanosleep (clock_id: INTEGER; flags: INTEGER; req: TIMESPEC_STRUCT_API; rem: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_clock_nanosleep (clock_id, flags, req.item, rem.item)
		ensure
			instance_free: class
		end

	clock_getcpuclockid (pid: INTEGER; clock_id: POINTER): INTEGER 
		do
			Result := c_clock_getcpuclockid (pid, clock_id)
		ensure
			instance_free: class
		end

	timer_create (clock_id: INTEGER; evp: SIGEVENT_STRUCT_API; timerid: POINTER): INTEGER 
		do
			Result := c_timer_create (clock_id, evp.item, timerid)
		ensure
			instance_free: class
		end

	timer_delete (timerid: POINTER): INTEGER 
		do
			Result := c_timer_delete (timerid)
		ensure
			instance_free: class
		end

	timer_settime (timerid: POINTER; flags: INTEGER; value: ITIMERSPEC_STRUCT_API; ovalue: ITIMERSPEC_STRUCT_API): INTEGER 
		do
			Result := c_timer_settime (timerid, flags, value.item, ovalue.item)
		ensure
			instance_free: class
		end

	timer_gettime (timerid: POINTER; value: ITIMERSPEC_STRUCT_API): INTEGER 
		do
			Result := c_timer_gettime (timerid, value.item)
		ensure
			instance_free: class
		end

	timer_getoverrun (timerid: POINTER): INTEGER 
		do
			Result := c_timer_getoverrun (timerid)
		ensure
			instance_free: class
		end

	timespec_get (ts: TIMESPEC_STRUCT_API; base: INTEGER): INTEGER 
		do
			Result := c_timespec_get (ts.item, base)
		ensure
			instance_free: class
		end

feature -- Externals

	c_time (timer: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return time ((time_t*)$timer);
			]"
		end

	c_mktime (tp: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return mktime ((struct tm*)$tp);
			]"
		end

	c_strftime (s: POINTER; maxsize: INTEGER; format: POINTER; tp: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return strftime ((char*)$s, (size_t)$maxsize, (char const*)$format, (struct tm const*)$tp);
			]"
		end

	c_strftime_l (s: POINTER; maxsize: INTEGER; format: POINTER; tp: POINTER; loc: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return strftime_l ((char*)$s, (size_t)$maxsize, (char const*)$format, (struct tm const*)$tp, (locale_t)$loc);
			]"
		end

	c_gmtime (timer: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return gmtime ((time_t const*)$timer);
			]"
		end

	c_localtime (timer: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return localtime ((time_t const*)$timer);
			]"
		end

	c_gmtime_r (timer: POINTER; tp: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return gmtime_r ((time_t const*)$timer, (struct tm*)$tp);
			]"
		end

	c_localtime_r (timer: POINTER; tp: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return localtime_r ((time_t const*)$timer, (struct tm*)$tp);
			]"
		end

	c_asctime (tp: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return asctime ((struct tm const*)$tp);
			]"
		end

	c_ctime (timer: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return ctime ((time_t const*)$timer);
			]"
		end

	c_asctime_r (tp: POINTER; buf: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return asctime_r ((struct tm const*)$tp, (char*)$buf);
			]"
		end

	c_ctime_r (timer: POINTER; buf: POINTER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return ctime_r ((time_t const*)$timer, (char*)$buf);
			]"
		end

	c_stime (a_when: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return stime ((time_t const*)$a_when);
			]"
		end

	c_timegm (tp: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timegm ((struct tm*)$tp);
			]"
		end

	c_timelocal (tp: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timelocal ((struct tm*)$tp);
			]"
		end

	c_nanosleep (requested_time: POINTER; remaining: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return nanosleep ((struct timespec const*)$requested_time, (struct timespec*)$remaining);
			]"
		end

	c_clock_getres (clock_id: INTEGER; res: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return clock_getres ((clockid_t)$clock_id, (struct timespec*)$res);
			]"
		end

	c_clock_gettime (clock_id: INTEGER; tp: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return clock_gettime ((clockid_t)$clock_id, (struct timespec*)$tp);
			]"
		end

	c_clock_settime (clock_id: INTEGER; tp: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return clock_settime ((clockid_t)$clock_id, (struct timespec const*)$tp);
			]"
		end

	c_clock_nanosleep (clock_id: INTEGER; flags: INTEGER; req: POINTER; rem: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return clock_nanosleep ((clockid_t)$clock_id, (int)$flags, (struct timespec const*)$req, (struct timespec*)$rem);
			]"
		end

	c_clock_getcpuclockid (pid: INTEGER; clock_id: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return clock_getcpuclockid ((pid_t)$pid, (clockid_t*)$clock_id);
			]"
		end

	c_timer_create (clock_id: INTEGER; evp: POINTER; timerid: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timer_create ((clockid_t)$clock_id, (struct sigevent*)$evp, (timer_t*)$timerid);
			]"
		end

	c_timer_delete (timerid: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timer_delete ((timer_t)$timerid);
			]"
		end

	c_timer_settime (timerid: POINTER; flags: INTEGER; value: POINTER; ovalue: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timer_settime ((timer_t)$timerid, (int)$flags, (struct itimerspec const*)$value, (struct itimerspec*)$ovalue);
			]"
		end

	c_timer_gettime (timerid: POINTER; value: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timer_gettime ((timer_t)$timerid, (struct itimerspec*)$value);
			]"
		end

	c_timer_getoverrun (timerid: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timer_getoverrun ((timer_t)$timerid);
			]"
		end

	c_timespec_get (ts: POINTER; base: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return timespec_get ((struct timespec*)$ts, (int)$base);
			]"
		end

feature -- Externals Address

end
