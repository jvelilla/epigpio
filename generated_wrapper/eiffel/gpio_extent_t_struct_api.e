note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GPIO_EXTENT_T_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	size: INTEGER
			-- Access member `size`
		require
			exists: exists
		do
			Result := c_size (item)
		ensure
			result_correct: Result = c_size (item)
		end

	set_size (a_value: INTEGER) 
			-- Change the value of member `size` to `a_value`.
		require
			exists: exists
		do
			set_c_size (item, a_value)
		ensure
			size_set: a_value = size
		end

	ptr: POINTER
			-- Access member `ptr`
		require
			exists: exists
		do
			Result := c_ptr (item)
		ensure
			result_correct: Result = c_ptr (item)
		end

	set_ptr (a_value: POINTER) 
			-- Change the value of member `ptr` to `a_value`.
		require
			exists: exists
		do
			set_c_ptr (item, a_value)
		ensure
			ptr_set: a_value = ptr
		end

	data: INTEGER
			-- Access member `data`
		require
			exists: exists
		do
			Result := c_data (item)
		ensure
			result_correct: Result = c_data (item)
		end

	set_data (a_value: INTEGER) 
			-- Change the value of member `data` to `a_value`.
		require
			exists: exists
		do
			set_c_data (item, a_value)
		ensure
			data_set: a_value = data
		end

feature {NONE} -- Implementation wrapper for struct gpioExtent_t

	sizeof_external: INTEGER 
		external
			"C inline use <pigpio.h>"
		alias
			"sizeof(gpioExtent_t)"
		end

	c_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((gpioExtent_t*)$an_item)->size
			]"
		end

	set_c_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((gpioExtent_t*)$an_item)->size =  (size_t)$a_value
			]"
		ensure
			size_set: a_value = c_size (an_item)
		end

	c_ptr (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((gpioExtent_t*)$an_item)->ptr
			]"
		end

	set_c_ptr (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((gpioExtent_t*)$an_item)->ptr =  (void*)$a_value
			]"
		ensure
			ptr_set: a_value = c_ptr (an_item)
		end

	c_data (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((gpioExtent_t*)$an_item)->data
			]"
		end

	set_c_data (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((gpioExtent_t*)$an_item)->data =  (uint32_t)$a_value
			]"
		ensure
			data_set: a_value = c_data (an_item)
		end

end
