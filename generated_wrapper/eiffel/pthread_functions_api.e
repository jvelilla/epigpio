note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class PTHREAD_FUNCTIONS_API


feature -- Access

	pthread_create (newthread: POINTER; attr: PTHREAD_ATTR_T_UNION_API; start_routine: POINTER; arg: POINTER): INTEGER 
		do
			Result := c_pthread_create (newthread, attr.item, start_routine, arg)
		ensure
			instance_free: class
		end

	pthread_exit (retval: POINTER) 
		do
			c_pthread_exit (retval)
		ensure
			instance_free: class
		end

	pthread_join (th: INTEGER; thread_return: POINTER): INTEGER 
		do
			Result := c_pthread_join (th, thread_return)
		ensure
			instance_free: class
		end

	pthread_detach (th: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_detach ((pthread_t)$th);
			]"
		end

	pthread_self: INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_self ();
			]"
		end

	pthread_equal (thread1: INTEGER; thread2: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_equal ((pthread_t)$thread1, (pthread_t)$thread2);
			]"
		end

	pthread_attr_init (attr: PTHREAD_ATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_attr_init (attr.item)
		ensure
			instance_free: class
		end

	pthread_attr_destroy (attr: PTHREAD_ATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_attr_destroy (attr.item)
		ensure
			instance_free: class
		end

	pthread_attr_getdetachstate (attr: PTHREAD_ATTR_T_UNION_API; detachstate: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getdetachstate (attr.item, detachstate)
		ensure
			instance_free: class
		end

	pthread_attr_setdetachstate (attr: PTHREAD_ATTR_T_UNION_API; detachstate: INTEGER): INTEGER 
		do
			Result := c_pthread_attr_setdetachstate (attr.item, detachstate)
		ensure
			instance_free: class
		end

	pthread_attr_getguardsize (attr: PTHREAD_ATTR_T_UNION_API; guardsize: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getguardsize (attr.item, guardsize)
		ensure
			instance_free: class
		end

	pthread_attr_setguardsize (attr: PTHREAD_ATTR_T_UNION_API; guardsize: INTEGER): INTEGER 
		do
			Result := c_pthread_attr_setguardsize (attr.item, guardsize)
		ensure
			instance_free: class
		end

	pthread_attr_getschedparam (attr: PTHREAD_ATTR_T_UNION_API; param: SCHED_PARAM_STRUCT_API): INTEGER 
		do
			Result := c_pthread_attr_getschedparam (attr.item, param.item)
		ensure
			instance_free: class
		end

	pthread_attr_setschedparam (attr: PTHREAD_ATTR_T_UNION_API; param: SCHED_PARAM_STRUCT_API): INTEGER 
		do
			Result := c_pthread_attr_setschedparam (attr.item, param.item)
		ensure
			instance_free: class
		end

	pthread_attr_getschedpolicy (attr: PTHREAD_ATTR_T_UNION_API; policy: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getschedpolicy (attr.item, policy)
		ensure
			instance_free: class
		end

	pthread_attr_setschedpolicy (attr: PTHREAD_ATTR_T_UNION_API; policy: INTEGER): INTEGER 
		do
			Result := c_pthread_attr_setschedpolicy (attr.item, policy)
		ensure
			instance_free: class
		end

	pthread_attr_getinheritsched (attr: PTHREAD_ATTR_T_UNION_API; a_inherit: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getinheritsched (attr.item, a_inherit)
		ensure
			instance_free: class
		end

	pthread_attr_setinheritsched (attr: PTHREAD_ATTR_T_UNION_API; a_inherit: INTEGER): INTEGER 
		do
			Result := c_pthread_attr_setinheritsched (attr.item, a_inherit)
		ensure
			instance_free: class
		end

	pthread_attr_getscope (attr: PTHREAD_ATTR_T_UNION_API; scope: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getscope (attr.item, scope)
		ensure
			instance_free: class
		end

	pthread_attr_setscope (attr: PTHREAD_ATTR_T_UNION_API; scope: INTEGER): INTEGER 
		do
			Result := c_pthread_attr_setscope (attr.item, scope)
		ensure
			instance_free: class
		end

	pthread_attr_getstackaddr (attr: PTHREAD_ATTR_T_UNION_API; stackaddr: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getstackaddr (attr.item, stackaddr)
		ensure
			instance_free: class
		end

	pthread_attr_setstackaddr (attr: PTHREAD_ATTR_T_UNION_API; stackaddr: POINTER): INTEGER 
		do
			Result := c_pthread_attr_setstackaddr (attr.item, stackaddr)
		ensure
			instance_free: class
		end

	pthread_attr_getstacksize (attr: PTHREAD_ATTR_T_UNION_API; stacksize: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getstacksize (attr.item, stacksize)
		ensure
			instance_free: class
		end

	pthread_attr_setstacksize (attr: PTHREAD_ATTR_T_UNION_API; stacksize: INTEGER): INTEGER 
		do
			Result := c_pthread_attr_setstacksize (attr.item, stacksize)
		ensure
			instance_free: class
		end

	pthread_attr_getstack (attr: PTHREAD_ATTR_T_UNION_API; stackaddr: POINTER; stacksize: POINTER): INTEGER 
		do
			Result := c_pthread_attr_getstack (attr.item, stackaddr, stacksize)
		ensure
			instance_free: class
		end

	pthread_attr_setstack (attr: PTHREAD_ATTR_T_UNION_API; stackaddr: POINTER; stacksize: INTEGER): INTEGER 
		do
			Result := c_pthread_attr_setstack (attr.item, stackaddr, stacksize)
		ensure
			instance_free: class
		end

	pthread_setschedparam (target_thread: INTEGER; policy: INTEGER; param: SCHED_PARAM_STRUCT_API): INTEGER 
		do
			Result := c_pthread_setschedparam (target_thread, policy, param.item)
		ensure
			instance_free: class
		end

	pthread_getschedparam (target_thread: INTEGER; policy: POINTER; param: SCHED_PARAM_STRUCT_API): INTEGER 
		do
			Result := c_pthread_getschedparam (target_thread, policy, param.item)
		ensure
			instance_free: class
		end

	pthread_setschedprio (target_thread: INTEGER; prio: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_setschedprio ((pthread_t)$target_thread, (int)$prio);
			]"
		end

	pthread_once (once_control: POINTER; init_routine: POINTER): INTEGER 
		do
			Result := c_pthread_once (once_control, init_routine)
		ensure
			instance_free: class
		end

	pthread_setcancelstate (state: INTEGER; oldstate: POINTER): INTEGER 
		do
			Result := c_pthread_setcancelstate (state, oldstate)
		ensure
			instance_free: class
		end

	pthread_setcanceltype (type: INTEGER; oldtype: POINTER): INTEGER 
		do
			Result := c_pthread_setcanceltype (type, oldtype)
		ensure
			instance_free: class
		end

	pthread_cancel (th: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_cancel ((pthread_t)$th);
			]"
		end

	pthread_testcancel
		external
			"C inline use <pigpio.h>"
		alias
			"[
				pthread_testcancel ();
			]"
		end

	pthread_register_cancel (buf: PTHREAD_UNWIND_BUF_T_STRUCT_API) 
		do
			c_pthread_register_cancel (buf.item)
		ensure
			instance_free: class
		end

	pthread_unregister_cancel (buf: PTHREAD_UNWIND_BUF_T_STRUCT_API) 
		do
			c_pthread_unregister_cancel (buf.item)
		ensure
			instance_free: class
		end

	pthread_unwind_next (buf: PTHREAD_UNWIND_BUF_T_STRUCT_API) 
		do
			c_pthread_unwind_next (buf.item)
		ensure
			instance_free: class
		end

	sigsetjmp (env: JMP_BUF_TAG_STRUCT_API; savemask: INTEGER): INTEGER 
		do
			Result := c_sigsetjmp (env.item, savemask)
		ensure
			instance_free: class
		end

	pthread_mutex_init (mutex: PTHREAD_MUTEX_T_UNION_API; mutexattr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutex_init (mutex.item, mutexattr.item)
		ensure
			instance_free: class
		end

	pthread_mutex_destroy (mutex: PTHREAD_MUTEX_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutex_destroy (mutex.item)
		ensure
			instance_free: class
		end

	pthread_mutex_trylock (mutex: PTHREAD_MUTEX_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutex_trylock (mutex.item)
		ensure
			instance_free: class
		end

	pthread_mutex_lock (mutex: PTHREAD_MUTEX_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutex_lock (mutex.item)
		ensure
			instance_free: class
		end

	pthread_mutex_timedlock (mutex: PTHREAD_MUTEX_T_UNION_API; abstime: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_pthread_mutex_timedlock (mutex.item, abstime.item)
		ensure
			instance_free: class
		end

	pthread_mutex_unlock (mutex: PTHREAD_MUTEX_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutex_unlock (mutex.item)
		ensure
			instance_free: class
		end

	pthread_mutex_getprioceiling (mutex: PTHREAD_MUTEX_T_UNION_API; prioceiling: POINTER): INTEGER 
		do
			Result := c_pthread_mutex_getprioceiling (mutex.item, prioceiling)
		ensure
			instance_free: class
		end

	pthread_mutex_setprioceiling (mutex: PTHREAD_MUTEX_T_UNION_API; prioceiling: INTEGER; old_ceiling: POINTER): INTEGER 
		do
			Result := c_pthread_mutex_setprioceiling (mutex.item, prioceiling, old_ceiling)
		ensure
			instance_free: class
		end

	pthread_mutex_consistent (mutex: PTHREAD_MUTEX_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutex_consistent (mutex.item)
		ensure
			instance_free: class
		end

	pthread_mutexattr_init (attr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutexattr_init (attr.item)
		ensure
			instance_free: class
		end

	pthread_mutexattr_destroy (attr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_mutexattr_destroy (attr.item)
		ensure
			instance_free: class
		end

	pthread_mutexattr_getpshared (attr: PTHREAD_MUTEXATTR_T_UNION_API; pshared: POINTER): INTEGER 
		do
			Result := c_pthread_mutexattr_getpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_mutexattr_setpshared (attr: PTHREAD_MUTEXATTR_T_UNION_API; pshared: INTEGER): INTEGER 
		do
			Result := c_pthread_mutexattr_setpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_mutexattr_gettype (attr: PTHREAD_MUTEXATTR_T_UNION_API; kind: POINTER): INTEGER 
		do
			Result := c_pthread_mutexattr_gettype (attr.item, kind)
		ensure
			instance_free: class
		end

	pthread_mutexattr_settype (attr: PTHREAD_MUTEXATTR_T_UNION_API; kind: INTEGER): INTEGER 
		do
			Result := c_pthread_mutexattr_settype (attr.item, kind)
		ensure
			instance_free: class
		end

	pthread_mutexattr_getprotocol (attr: PTHREAD_MUTEXATTR_T_UNION_API; protocol: POINTER): INTEGER 
		do
			Result := c_pthread_mutexattr_getprotocol (attr.item, protocol)
		ensure
			instance_free: class
		end

	pthread_mutexattr_setprotocol (attr: PTHREAD_MUTEXATTR_T_UNION_API; protocol: INTEGER): INTEGER 
		do
			Result := c_pthread_mutexattr_setprotocol (attr.item, protocol)
		ensure
			instance_free: class
		end

	pthread_mutexattr_getprioceiling (attr: PTHREAD_MUTEXATTR_T_UNION_API; prioceiling: POINTER): INTEGER 
		do
			Result := c_pthread_mutexattr_getprioceiling (attr.item, prioceiling)
		ensure
			instance_free: class
		end

	pthread_mutexattr_setprioceiling (attr: PTHREAD_MUTEXATTR_T_UNION_API; prioceiling: INTEGER): INTEGER 
		do
			Result := c_pthread_mutexattr_setprioceiling (attr.item, prioceiling)
		ensure
			instance_free: class
		end

	pthread_mutexattr_getrobust (attr: PTHREAD_MUTEXATTR_T_UNION_API; robustness: POINTER): INTEGER 
		do
			Result := c_pthread_mutexattr_getrobust (attr.item, robustness)
		ensure
			instance_free: class
		end

	pthread_mutexattr_setrobust (attr: PTHREAD_MUTEXATTR_T_UNION_API; robustness: INTEGER): INTEGER 
		do
			Result := c_pthread_mutexattr_setrobust (attr.item, robustness)
		ensure
			instance_free: class
		end

	pthread_rwlock_init (rwlock: PTHREAD_RWLOCK_T_UNION_API; attr: PTHREAD_RWLOCKATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlock_init (rwlock.item, attr.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_destroy (rwlock: PTHREAD_RWLOCK_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlock_destroy (rwlock.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_rdlock (rwlock: PTHREAD_RWLOCK_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlock_rdlock (rwlock.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_tryrdlock (rwlock: PTHREAD_RWLOCK_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlock_tryrdlock (rwlock.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_timedrdlock (rwlock: PTHREAD_RWLOCK_T_UNION_API; abstime: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_pthread_rwlock_timedrdlock (rwlock.item, abstime.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_wrlock (rwlock: PTHREAD_RWLOCK_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlock_wrlock (rwlock.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_trywrlock (rwlock: PTHREAD_RWLOCK_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlock_trywrlock (rwlock.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_timedwrlock (rwlock: PTHREAD_RWLOCK_T_UNION_API; abstime: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_pthread_rwlock_timedwrlock (rwlock.item, abstime.item)
		ensure
			instance_free: class
		end

	pthread_rwlock_unlock (rwlock: PTHREAD_RWLOCK_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlock_unlock (rwlock.item)
		ensure
			instance_free: class
		end

	pthread_rwlockattr_init (attr: PTHREAD_RWLOCKATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlockattr_init (attr.item)
		ensure
			instance_free: class
		end

	pthread_rwlockattr_destroy (attr: PTHREAD_RWLOCKATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_rwlockattr_destroy (attr.item)
		ensure
			instance_free: class
		end

	pthread_rwlockattr_getpshared (attr: PTHREAD_RWLOCKATTR_T_UNION_API; pshared: POINTER): INTEGER 
		do
			Result := c_pthread_rwlockattr_getpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_rwlockattr_setpshared (attr: PTHREAD_RWLOCKATTR_T_UNION_API; pshared: INTEGER): INTEGER 
		do
			Result := c_pthread_rwlockattr_setpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_rwlockattr_getkind_np (attr: PTHREAD_RWLOCKATTR_T_UNION_API; pref: POINTER): INTEGER 
		do
			Result := c_pthread_rwlockattr_getkind_np (attr.item, pref)
		ensure
			instance_free: class
		end

	pthread_rwlockattr_setkind_np (attr: PTHREAD_RWLOCKATTR_T_UNION_API; pref: INTEGER): INTEGER 
		do
			Result := c_pthread_rwlockattr_setkind_np (attr.item, pref)
		ensure
			instance_free: class
		end

	pthread_cond_init (cond: PTHREAD_COND_T_UNION_API; cond_attr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_cond_init (cond.item, cond_attr.item)
		ensure
			instance_free: class
		end

	pthread_cond_destroy (cond: PTHREAD_COND_T_UNION_API): INTEGER 
		do
			Result := c_pthread_cond_destroy (cond.item)
		ensure
			instance_free: class
		end

	pthread_cond_signal (cond: PTHREAD_COND_T_UNION_API): INTEGER 
		do
			Result := c_pthread_cond_signal (cond.item)
		ensure
			instance_free: class
		end

	pthread_cond_broadcast (cond: PTHREAD_COND_T_UNION_API): INTEGER 
		do
			Result := c_pthread_cond_broadcast (cond.item)
		ensure
			instance_free: class
		end

	pthread_cond_wait (cond: PTHREAD_COND_T_UNION_API; mutex: PTHREAD_MUTEX_T_UNION_API): INTEGER 
		do
			Result := c_pthread_cond_wait (cond.item, mutex.item)
		ensure
			instance_free: class
		end

	pthread_cond_timedwait (cond: PTHREAD_COND_T_UNION_API; mutex: PTHREAD_MUTEX_T_UNION_API; abstime: TIMESPEC_STRUCT_API): INTEGER 
		do
			Result := c_pthread_cond_timedwait (cond.item, mutex.item, abstime.item)
		ensure
			instance_free: class
		end

	pthread_condattr_init (attr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_condattr_init (attr.item)
		ensure
			instance_free: class
		end

	pthread_condattr_destroy (attr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_condattr_destroy (attr.item)
		ensure
			instance_free: class
		end

	pthread_condattr_getpshared (attr: PTHREAD_MUTEXATTR_T_UNION_API; pshared: POINTER): INTEGER 
		do
			Result := c_pthread_condattr_getpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_condattr_setpshared (attr: PTHREAD_MUTEXATTR_T_UNION_API; pshared: INTEGER): INTEGER 
		do
			Result := c_pthread_condattr_setpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_condattr_getclock (attr: PTHREAD_MUTEXATTR_T_UNION_API; clock_id: POINTER): INTEGER 
		do
			Result := c_pthread_condattr_getclock (attr.item, clock_id)
		ensure
			instance_free: class
		end

	pthread_condattr_setclock (attr: PTHREAD_MUTEXATTR_T_UNION_API; clock_id: INTEGER): INTEGER 
		do
			Result := c_pthread_condattr_setclock (attr.item, clock_id)
		ensure
			instance_free: class
		end

	pthread_spin_init (lock: POINTER; pshared: INTEGER): INTEGER 
		do
			Result := c_pthread_spin_init (lock, pshared)
		ensure
			instance_free: class
		end

	pthread_spin_destroy (lock: POINTER): INTEGER 
		do
			Result := c_pthread_spin_destroy (lock)
		ensure
			instance_free: class
		end

	pthread_spin_lock (lock: POINTER): INTEGER 
		do
			Result := c_pthread_spin_lock (lock)
		ensure
			instance_free: class
		end

	pthread_spin_trylock (lock: POINTER): INTEGER 
		do
			Result := c_pthread_spin_trylock (lock)
		ensure
			instance_free: class
		end

	pthread_spin_unlock (lock: POINTER): INTEGER 
		do
			Result := c_pthread_spin_unlock (lock)
		ensure
			instance_free: class
		end

	pthread_barrier_init (barrier: PTHREAD_BARRIER_T_UNION_API; attr: PTHREAD_MUTEXATTR_T_UNION_API; count: INTEGER): INTEGER 
		do
			Result := c_pthread_barrier_init (barrier.item, attr.item, count)
		ensure
			instance_free: class
		end

	pthread_barrier_destroy (barrier: PTHREAD_BARRIER_T_UNION_API): INTEGER 
		do
			Result := c_pthread_barrier_destroy (barrier.item)
		ensure
			instance_free: class
		end

	pthread_barrier_wait (barrier: PTHREAD_BARRIER_T_UNION_API): INTEGER 
		do
			Result := c_pthread_barrier_wait (barrier.item)
		ensure
			instance_free: class
		end

	pthread_barrierattr_init (attr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_barrierattr_init (attr.item)
		ensure
			instance_free: class
		end

	pthread_barrierattr_destroy (attr: PTHREAD_MUTEXATTR_T_UNION_API): INTEGER 
		do
			Result := c_pthread_barrierattr_destroy (attr.item)
		ensure
			instance_free: class
		end

	pthread_barrierattr_getpshared (attr: PTHREAD_MUTEXATTR_T_UNION_API; pshared: POINTER): INTEGER 
		do
			Result := c_pthread_barrierattr_getpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_barrierattr_setpshared (attr: PTHREAD_MUTEXATTR_T_UNION_API; pshared: INTEGER): INTEGER 
		do
			Result := c_pthread_barrierattr_setpshared (attr.item, pshared)
		ensure
			instance_free: class
		end

	pthread_key_create (key: POINTER; destr_function: POINTER): INTEGER 
		do
			Result := c_pthread_key_create (key, destr_function)
		ensure
			instance_free: class
		end

	pthread_key_delete (key: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_key_delete ((pthread_key_t)$key);
			]"
		end

	pthread_getspecific (key: INTEGER): POINTER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_getspecific ((pthread_key_t)$key);
			]"
		end

	pthread_setspecific (key: INTEGER; pointer: POINTER): INTEGER 
		do
			Result := c_pthread_setspecific (key, pointer)
		ensure
			instance_free: class
		end

	pthread_getcpuclockid (thread_id: INTEGER; clock_id: POINTER): INTEGER 
		do
			Result := c_pthread_getcpuclockid (thread_id, clock_id)
		ensure
			instance_free: class
		end

	pthread_atfork (prepare: POINTER; parent: POINTER; child: POINTER): INTEGER 
		do
			Result := c_pthread_atfork (prepare, parent, child)
		ensure
			instance_free: class
		end

feature -- Externals

	c_pthread_create (newthread: POINTER; attr: POINTER; start_routine: POINTER; arg: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_create ((pthread_t*)$newthread, (pthread_attr_t const*)$attr, (void *(*) (void *anonymous_1))$start_routine, (void*)$arg);
			]"
		end

	c_pthread_exit (retval: POINTER)
		external
			"C inline use <pigpio.h>"
		alias
			"[
				pthread_exit ((void*)$retval);
			]"
		end

	c_pthread_join (th: INTEGER; thread_return: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_join ((pthread_t)$th, (void**)$thread_return);
			]"
		end

	c_pthread_attr_init (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_init ((pthread_attr_t*)$attr);
			]"
		end

	c_pthread_attr_destroy (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_destroy ((pthread_attr_t*)$attr);
			]"
		end

	c_pthread_attr_getdetachstate (attr: POINTER; detachstate: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getdetachstate ((pthread_attr_t const*)$attr, (int*)$detachstate);
			]"
		end

	c_pthread_attr_setdetachstate (attr: POINTER; detachstate: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setdetachstate ((pthread_attr_t*)$attr, (int)$detachstate);
			]"
		end

	c_pthread_attr_getguardsize (attr: POINTER; guardsize: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getguardsize ((pthread_attr_t const*)$attr, (size_t*)$guardsize);
			]"
		end

	c_pthread_attr_setguardsize (attr: POINTER; guardsize: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setguardsize ((pthread_attr_t*)$attr, (size_t)$guardsize);
			]"
		end

	c_pthread_attr_getschedparam (attr: POINTER; param: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getschedparam ((pthread_attr_t const*)$attr, (struct sched_param*)$param);
			]"
		end

	c_pthread_attr_setschedparam (attr: POINTER; param: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setschedparam ((pthread_attr_t*)$attr, (struct sched_param const*)$param);
			]"
		end

	c_pthread_attr_getschedpolicy (attr: POINTER; policy: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getschedpolicy ((pthread_attr_t const*)$attr, (int*)$policy);
			]"
		end

	c_pthread_attr_setschedpolicy (attr: POINTER; policy: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setschedpolicy ((pthread_attr_t*)$attr, (int)$policy);
			]"
		end

	c_pthread_attr_getinheritsched (attr: POINTER; a_inherit: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getinheritsched ((pthread_attr_t const*)$attr, (int*)$a_inherit);
			]"
		end

	c_pthread_attr_setinheritsched (attr: POINTER; a_inherit: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setinheritsched ((pthread_attr_t*)$attr, (int)$a_inherit);
			]"
		end

	c_pthread_attr_getscope (attr: POINTER; scope: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getscope ((pthread_attr_t const*)$attr, (int*)$scope);
			]"
		end

	c_pthread_attr_setscope (attr: POINTER; scope: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setscope ((pthread_attr_t*)$attr, (int)$scope);
			]"
		end

	c_pthread_attr_getstackaddr (attr: POINTER; stackaddr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getstackaddr ((pthread_attr_t const*)$attr, (void**)$stackaddr);
			]"
		end

	c_pthread_attr_setstackaddr (attr: POINTER; stackaddr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setstackaddr ((pthread_attr_t*)$attr, (void*)$stackaddr);
			]"
		end

	c_pthread_attr_getstacksize (attr: POINTER; stacksize: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getstacksize ((pthread_attr_t const*)$attr, (size_t*)$stacksize);
			]"
		end

	c_pthread_attr_setstacksize (attr: POINTER; stacksize: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setstacksize ((pthread_attr_t*)$attr, (size_t)$stacksize);
			]"
		end

	c_pthread_attr_getstack (attr: POINTER; stackaddr: POINTER; stacksize: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_getstack ((pthread_attr_t const*)$attr, (void**)$stackaddr, (size_t*)$stacksize);
			]"
		end

	c_pthread_attr_setstack (attr: POINTER; stackaddr: POINTER; stacksize: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_attr_setstack ((pthread_attr_t*)$attr, (void*)$stackaddr, (size_t)$stacksize);
			]"
		end

	c_pthread_setschedparam (target_thread: INTEGER; policy: INTEGER; param: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_setschedparam ((pthread_t)$target_thread, (int)$policy, (struct sched_param const*)$param);
			]"
		end

	c_pthread_getschedparam (target_thread: INTEGER; policy: POINTER; param: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_getschedparam ((pthread_t)$target_thread, (int*)$policy, (struct sched_param*)$param);
			]"
		end

	c_pthread_once (once_control: POINTER; init_routine: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_once ((pthread_once_t*)$once_control, (void (*) ())$init_routine);
			]"
		end

	c_pthread_setcancelstate (state: INTEGER; oldstate: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_setcancelstate ((int)$state, (int*)$oldstate);
			]"
		end

	c_pthread_setcanceltype (type: INTEGER; oldtype: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_setcanceltype ((int)$type, (int*)$oldtype);
			]"
		end

	c_pthread_register_cancel (buf: POINTER)
		external
			"C inline use <pigpio.h>"
		alias
			"[
				__pthread_register_cancel ((__pthread_unwind_buf_t*)$buf);
			]"
		end

	c_pthread_unregister_cancel (buf: POINTER)
		external
			"C inline use <pigpio.h>"
		alias
			"[
				__pthread_unregister_cancel ((__pthread_unwind_buf_t*)$buf);
			]"
		end

	c_pthread_unwind_next (buf: POINTER)
		external
			"C inline use <pigpio.h>"
		alias
			"[
				__pthread_unwind_next ((__pthread_unwind_buf_t*)$buf);
			]"
		end

	c_sigsetjmp (env: POINTER; savemask: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return __sigsetjmp ((struct __jmp_buf_tag*)$env, (int)$savemask);
			]"
		end

	c_pthread_mutex_init (mutex: POINTER; mutexattr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_init ((pthread_mutex_t*)$mutex, (pthread_mutexattr_t const*)$mutexattr);
			]"
		end

	c_pthread_mutex_destroy (mutex: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_destroy ((pthread_mutex_t*)$mutex);
			]"
		end

	c_pthread_mutex_trylock (mutex: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_trylock ((pthread_mutex_t*)$mutex);
			]"
		end

	c_pthread_mutex_lock (mutex: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_lock ((pthread_mutex_t*)$mutex);
			]"
		end

	c_pthread_mutex_timedlock (mutex: POINTER; abstime: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_timedlock ((pthread_mutex_t*)$mutex, (struct timespec const*)$abstime);
			]"
		end

	c_pthread_mutex_unlock (mutex: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_unlock ((pthread_mutex_t*)$mutex);
			]"
		end

	c_pthread_mutex_getprioceiling (mutex: POINTER; prioceiling: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_getprioceiling ((pthread_mutex_t const*)$mutex, (int*)$prioceiling);
			]"
		end

	c_pthread_mutex_setprioceiling (mutex: POINTER; prioceiling: INTEGER; old_ceiling: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_setprioceiling ((pthread_mutex_t*)$mutex, (int)$prioceiling, (int*)$old_ceiling);
			]"
		end

	c_pthread_mutex_consistent (mutex: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutex_consistent ((pthread_mutex_t*)$mutex);
			]"
		end

	c_pthread_mutexattr_init (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_init ((pthread_mutexattr_t*)$attr);
			]"
		end

	c_pthread_mutexattr_destroy (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_destroy ((pthread_mutexattr_t*)$attr);
			]"
		end

	c_pthread_mutexattr_getpshared (attr: POINTER; pshared: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_getpshared ((pthread_mutexattr_t const*)$attr, (int*)$pshared);
			]"
		end

	c_pthread_mutexattr_setpshared (attr: POINTER; pshared: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_setpshared ((pthread_mutexattr_t*)$attr, (int)$pshared);
			]"
		end

	c_pthread_mutexattr_gettype (attr: POINTER; kind: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_gettype ((pthread_mutexattr_t const*)$attr, (int*)$kind);
			]"
		end

	c_pthread_mutexattr_settype (attr: POINTER; kind: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_settype ((pthread_mutexattr_t*)$attr, (int)$kind);
			]"
		end

	c_pthread_mutexattr_getprotocol (attr: POINTER; protocol: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_getprotocol ((pthread_mutexattr_t const*)$attr, (int*)$protocol);
			]"
		end

	c_pthread_mutexattr_setprotocol (attr: POINTER; protocol: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_setprotocol ((pthread_mutexattr_t*)$attr, (int)$protocol);
			]"
		end

	c_pthread_mutexattr_getprioceiling (attr: POINTER; prioceiling: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_getprioceiling ((pthread_mutexattr_t const*)$attr, (int*)$prioceiling);
			]"
		end

	c_pthread_mutexattr_setprioceiling (attr: POINTER; prioceiling: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_setprioceiling ((pthread_mutexattr_t*)$attr, (int)$prioceiling);
			]"
		end

	c_pthread_mutexattr_getrobust (attr: POINTER; robustness: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_getrobust ((pthread_mutexattr_t const*)$attr, (int*)$robustness);
			]"
		end

	c_pthread_mutexattr_setrobust (attr: POINTER; robustness: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_mutexattr_setrobust ((pthread_mutexattr_t*)$attr, (int)$robustness);
			]"
		end

	c_pthread_rwlock_init (rwlock: POINTER; attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_init ((pthread_rwlock_t*)$rwlock, (pthread_rwlockattr_t const*)$attr);
			]"
		end

	c_pthread_rwlock_destroy (rwlock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_destroy ((pthread_rwlock_t*)$rwlock);
			]"
		end

	c_pthread_rwlock_rdlock (rwlock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_rdlock ((pthread_rwlock_t*)$rwlock);
			]"
		end

	c_pthread_rwlock_tryrdlock (rwlock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_tryrdlock ((pthread_rwlock_t*)$rwlock);
			]"
		end

	c_pthread_rwlock_timedrdlock (rwlock: POINTER; abstime: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_timedrdlock ((pthread_rwlock_t*)$rwlock, (struct timespec const*)$abstime);
			]"
		end

	c_pthread_rwlock_wrlock (rwlock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_wrlock ((pthread_rwlock_t*)$rwlock);
			]"
		end

	c_pthread_rwlock_trywrlock (rwlock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_trywrlock ((pthread_rwlock_t*)$rwlock);
			]"
		end

	c_pthread_rwlock_timedwrlock (rwlock: POINTER; abstime: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_timedwrlock ((pthread_rwlock_t*)$rwlock, (struct timespec const*)$abstime);
			]"
		end

	c_pthread_rwlock_unlock (rwlock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlock_unlock ((pthread_rwlock_t*)$rwlock);
			]"
		end

	c_pthread_rwlockattr_init (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlockattr_init ((pthread_rwlockattr_t*)$attr);
			]"
		end

	c_pthread_rwlockattr_destroy (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlockattr_destroy ((pthread_rwlockattr_t*)$attr);
			]"
		end

	c_pthread_rwlockattr_getpshared (attr: POINTER; pshared: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlockattr_getpshared ((pthread_rwlockattr_t const*)$attr, (int*)$pshared);
			]"
		end

	c_pthread_rwlockattr_setpshared (attr: POINTER; pshared: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlockattr_setpshared ((pthread_rwlockattr_t*)$attr, (int)$pshared);
			]"
		end

	c_pthread_rwlockattr_getkind_np (attr: POINTER; pref: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlockattr_getkind_np ((pthread_rwlockattr_t const*)$attr, (int*)$pref);
			]"
		end

	c_pthread_rwlockattr_setkind_np (attr: POINTER; pref: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_rwlockattr_setkind_np ((pthread_rwlockattr_t*)$attr, (int)$pref);
			]"
		end

	c_pthread_cond_init (cond: POINTER; cond_attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_cond_init ((pthread_cond_t*)$cond, (pthread_condattr_t const*)$cond_attr);
			]"
		end

	c_pthread_cond_destroy (cond: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_cond_destroy ((pthread_cond_t*)$cond);
			]"
		end

	c_pthread_cond_signal (cond: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_cond_signal ((pthread_cond_t*)$cond);
			]"
		end

	c_pthread_cond_broadcast (cond: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_cond_broadcast ((pthread_cond_t*)$cond);
			]"
		end

	c_pthread_cond_wait (cond: POINTER; mutex: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_cond_wait ((pthread_cond_t*)$cond, (pthread_mutex_t*)$mutex);
			]"
		end

	c_pthread_cond_timedwait (cond: POINTER; mutex: POINTER; abstime: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_cond_timedwait ((pthread_cond_t*)$cond, (pthread_mutex_t*)$mutex, (struct timespec const*)$abstime);
			]"
		end

	c_pthread_condattr_init (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_condattr_init ((pthread_condattr_t*)$attr);
			]"
		end

	c_pthread_condattr_destroy (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_condattr_destroy ((pthread_condattr_t*)$attr);
			]"
		end

	c_pthread_condattr_getpshared (attr: POINTER; pshared: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_condattr_getpshared ((pthread_condattr_t const*)$attr, (int*)$pshared);
			]"
		end

	c_pthread_condattr_setpshared (attr: POINTER; pshared: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_condattr_setpshared ((pthread_condattr_t*)$attr, (int)$pshared);
			]"
		end

	c_pthread_condattr_getclock (attr: POINTER; clock_id: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_condattr_getclock ((pthread_condattr_t const*)$attr, (__clockid_t*)$clock_id);
			]"
		end

	c_pthread_condattr_setclock (attr: POINTER; clock_id: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_condattr_setclock ((pthread_condattr_t*)$attr, (__clockid_t)$clock_id);
			]"
		end

	c_pthread_spin_init (lock: POINTER; pshared: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_spin_init ((pthread_spinlock_t*)$lock, (int)$pshared);
			]"
		end

	c_pthread_spin_destroy (lock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_spin_destroy ((pthread_spinlock_t*)$lock);
			]"
		end

	c_pthread_spin_lock (lock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_spin_lock ((pthread_spinlock_t*)$lock);
			]"
		end

	c_pthread_spin_trylock (lock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_spin_trylock ((pthread_spinlock_t*)$lock);
			]"
		end

	c_pthread_spin_unlock (lock: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_spin_unlock ((pthread_spinlock_t*)$lock);
			]"
		end

	c_pthread_barrier_init (barrier: POINTER; attr: POINTER; count: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_barrier_init ((pthread_barrier_t*)$barrier, (pthread_barrierattr_t const*)$attr, (unsigned int)$count);
			]"
		end

	c_pthread_barrier_destroy (barrier: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_barrier_destroy ((pthread_barrier_t*)$barrier);
			]"
		end

	c_pthread_barrier_wait (barrier: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_barrier_wait ((pthread_barrier_t*)$barrier);
			]"
		end

	c_pthread_barrierattr_init (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_barrierattr_init ((pthread_barrierattr_t*)$attr);
			]"
		end

	c_pthread_barrierattr_destroy (attr: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_barrierattr_destroy ((pthread_barrierattr_t*)$attr);
			]"
		end

	c_pthread_barrierattr_getpshared (attr: POINTER; pshared: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_barrierattr_getpshared ((pthread_barrierattr_t const*)$attr, (int*)$pshared);
			]"
		end

	c_pthread_barrierattr_setpshared (attr: POINTER; pshared: INTEGER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_barrierattr_setpshared ((pthread_barrierattr_t*)$attr, (int)$pshared);
			]"
		end

	c_pthread_key_create (key: POINTER; destr_function: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_key_create ((pthread_key_t*)$key, (void (*) (void *anonymous_1))$destr_function);
			]"
		end

	c_pthread_setspecific (key: INTEGER; pointer: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_setspecific ((pthread_key_t)$key, (void const*)$pointer);
			]"
		end

	c_pthread_getcpuclockid (thread_id: INTEGER; clock_id: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_getcpuclockid ((pthread_t)$thread_id, (__clockid_t*)$clock_id);
			]"
		end

	c_pthread_atfork (prepare: POINTER; parent: POINTER; child: POINTER): INTEGER
		external
			"C inline use <pigpio.h>"
		alias
			"[
				return pthread_atfork ((void (*) ())$prepare, (void (*) ())$parent, (void (*) ())$child);
			]"
		end

feature -- Externals Address

end
