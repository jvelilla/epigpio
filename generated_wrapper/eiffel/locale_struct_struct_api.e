note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class LOCALE_STRUCT_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	locales: detachable LOCALE_DATA_STRUCT_API 
			-- Access member `__locales`
		require
			exists: exists
		do
			if attached c_locales (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_locales (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_locales (item) 
		end

	ctype_b: POINTER
			-- Access member `__ctype_b`
		require
			exists: exists
		do
			Result := c_ctype_b (item)
		ensure
			result_correct: Result = c_ctype_b (item)
		end

	set_ctype_b (a_value: POINTER) 
			-- Change the value of member `__ctype_b` to `a_value`.
		require
			exists: exists
		do
			set_c_ctype_b (item, a_value)
		ensure
			ctype_b_set: a_value = ctype_b
		end

	ctype_tolower: POINTER
			-- Access member `__ctype_tolower`
		require
			exists: exists
		do
			Result := c_ctype_tolower (item)
		ensure
			result_correct: Result = c_ctype_tolower (item)
		end

	set_ctype_tolower (a_value: POINTER) 
			-- Change the value of member `__ctype_tolower` to `a_value`.
		require
			exists: exists
		do
			set_c_ctype_tolower (item, a_value)
		ensure
			ctype_tolower_set: a_value = ctype_tolower
		end

	ctype_toupper: POINTER
			-- Access member `__ctype_toupper`
		require
			exists: exists
		do
			Result := c_ctype_toupper (item)
		ensure
			result_correct: Result = c_ctype_toupper (item)
		end

	set_ctype_toupper (a_value: POINTER) 
			-- Change the value of member `__ctype_toupper` to `a_value`.
		require
			exists: exists
		do
			set_c_ctype_toupper (item, a_value)
		ensure
			ctype_toupper_set: a_value = ctype_toupper
		end

	names: POINTER
			-- Access member `__names`
		require
			exists: exists
		do
			Result := c_names (item)
		ensure
			result_correct: Result = c_names (item)
		end

feature {NONE} -- Implementation wrapper for struct struct __locale_struct

	sizeof_external: INTEGER 
		external
			"C inline use <pigpio.h>"
		alias
			"sizeof(struct __locale_struct)"
		end

	c_locales (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__locales
			]"
		end

	c_ctype_b (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__ctype_b
			]"
		end

	set_c_ctype_b (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__ctype_b =  (unsigned short int const*)$a_value
			]"
		ensure
			ctype_b_set: a_value = c_ctype_b (an_item)
		end

	c_ctype_tolower (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__ctype_tolower
			]"
		end

	set_c_ctype_tolower (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__ctype_tolower =  (int const*)$a_value
			]"
		ensure
			ctype_tolower_set: a_value = c_ctype_tolower (an_item)
		end

	c_ctype_toupper (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__ctype_toupper
			]"
		end

	set_c_ctype_toupper (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__ctype_toupper =  (int const*)$a_value
			]"
		ensure
			ctype_toupper_set: a_value = c_ctype_toupper (an_item)
		end

	c_names (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((__locale_t)$an_item)->__names
			]"
		end

end
