note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class TM_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	tm_sec: INTEGER
			-- Access member `tm_sec`
		require
			exists: exists
		do
			Result := c_tm_sec (item)
		ensure
			result_correct: Result = c_tm_sec (item)
		end

	set_tm_sec (a_value: INTEGER) 
			-- Change the value of member `tm_sec` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_sec (item, a_value)
		ensure
			tm_sec_set: a_value = tm_sec
		end

	tm_min: INTEGER
			-- Access member `tm_min`
		require
			exists: exists
		do
			Result := c_tm_min (item)
		ensure
			result_correct: Result = c_tm_min (item)
		end

	set_tm_min (a_value: INTEGER) 
			-- Change the value of member `tm_min` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_min (item, a_value)
		ensure
			tm_min_set: a_value = tm_min
		end

	tm_hour: INTEGER
			-- Access member `tm_hour`
		require
			exists: exists
		do
			Result := c_tm_hour (item)
		ensure
			result_correct: Result = c_tm_hour (item)
		end

	set_tm_hour (a_value: INTEGER) 
			-- Change the value of member `tm_hour` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_hour (item, a_value)
		ensure
			tm_hour_set: a_value = tm_hour
		end

	tm_mday: INTEGER
			-- Access member `tm_mday`
		require
			exists: exists
		do
			Result := c_tm_mday (item)
		ensure
			result_correct: Result = c_tm_mday (item)
		end

	set_tm_mday (a_value: INTEGER) 
			-- Change the value of member `tm_mday` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_mday (item, a_value)
		ensure
			tm_mday_set: a_value = tm_mday
		end

	tm_mon: INTEGER
			-- Access member `tm_mon`
		require
			exists: exists
		do
			Result := c_tm_mon (item)
		ensure
			result_correct: Result = c_tm_mon (item)
		end

	set_tm_mon (a_value: INTEGER) 
			-- Change the value of member `tm_mon` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_mon (item, a_value)
		ensure
			tm_mon_set: a_value = tm_mon
		end

	tm_year: INTEGER
			-- Access member `tm_year`
		require
			exists: exists
		do
			Result := c_tm_year (item)
		ensure
			result_correct: Result = c_tm_year (item)
		end

	set_tm_year (a_value: INTEGER) 
			-- Change the value of member `tm_year` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_year (item, a_value)
		ensure
			tm_year_set: a_value = tm_year
		end

	tm_wday: INTEGER
			-- Access member `tm_wday`
		require
			exists: exists
		do
			Result := c_tm_wday (item)
		ensure
			result_correct: Result = c_tm_wday (item)
		end

	set_tm_wday (a_value: INTEGER) 
			-- Change the value of member `tm_wday` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_wday (item, a_value)
		ensure
			tm_wday_set: a_value = tm_wday
		end

	tm_yday: INTEGER
			-- Access member `tm_yday`
		require
			exists: exists
		do
			Result := c_tm_yday (item)
		ensure
			result_correct: Result = c_tm_yday (item)
		end

	set_tm_yday (a_value: INTEGER) 
			-- Change the value of member `tm_yday` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_yday (item, a_value)
		ensure
			tm_yday_set: a_value = tm_yday
		end

	tm_isdst: INTEGER
			-- Access member `tm_isdst`
		require
			exists: exists
		do
			Result := c_tm_isdst (item)
		ensure
			result_correct: Result = c_tm_isdst (item)
		end

	set_tm_isdst (a_value: INTEGER) 
			-- Change the value of member `tm_isdst` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_isdst (item, a_value)
		ensure
			tm_isdst_set: a_value = tm_isdst
		end

	tm_gmtoff: INTEGER
			-- Access member `tm_gmtoff`
		require
			exists: exists
		do
			Result := c_tm_gmtoff (item)
		ensure
			result_correct: Result = c_tm_gmtoff (item)
		end

	set_tm_gmtoff (a_value: INTEGER) 
			-- Change the value of member `tm_gmtoff` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_gmtoff (item, a_value)
		ensure
			tm_gmtoff_set: a_value = tm_gmtoff
		end

	tm_zone:  detachable C_STRING
			-- Access member `tm_zone`
		require
			exists: exists
		do
			if attached c_tm_zone (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_tm_zone (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_tm_zone (a_value: C_STRING) 
			-- Change the value of member `tm_zone` to `a_value`.
		require
			exists: exists
		do
			set_c_tm_zone (item, a_value.item )
		end

feature {NONE} -- Implementation wrapper for struct struct tm

	sizeof_external: INTEGER 
		external
			"C inline use <pigpio.h>"
		alias
			"sizeof(struct tm)"
		end

	c_tm_sec (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_sec
			]"
		end

	set_c_tm_sec (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_sec =  (int)$a_value
			]"
		ensure
			tm_sec_set: a_value = c_tm_sec (an_item)
		end

	c_tm_min (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_min
			]"
		end

	set_c_tm_min (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_min =  (int)$a_value
			]"
		ensure
			tm_min_set: a_value = c_tm_min (an_item)
		end

	c_tm_hour (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_hour
			]"
		end

	set_c_tm_hour (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_hour =  (int)$a_value
			]"
		ensure
			tm_hour_set: a_value = c_tm_hour (an_item)
		end

	c_tm_mday (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_mday
			]"
		end

	set_c_tm_mday (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_mday =  (int)$a_value
			]"
		ensure
			tm_mday_set: a_value = c_tm_mday (an_item)
		end

	c_tm_mon (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_mon
			]"
		end

	set_c_tm_mon (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_mon =  (int)$a_value
			]"
		ensure
			tm_mon_set: a_value = c_tm_mon (an_item)
		end

	c_tm_year (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_year
			]"
		end

	set_c_tm_year (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_year =  (int)$a_value
			]"
		ensure
			tm_year_set: a_value = c_tm_year (an_item)
		end

	c_tm_wday (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_wday
			]"
		end

	set_c_tm_wday (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_wday =  (int)$a_value
			]"
		ensure
			tm_wday_set: a_value = c_tm_wday (an_item)
		end

	c_tm_yday (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_yday
			]"
		end

	set_c_tm_yday (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_yday =  (int)$a_value
			]"
		ensure
			tm_yday_set: a_value = c_tm_yday (an_item)
		end

	c_tm_isdst (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_isdst
			]"
		end

	set_c_tm_isdst (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_isdst =  (int)$a_value
			]"
		ensure
			tm_isdst_set: a_value = c_tm_isdst (an_item)
		end

	c_tm_gmtoff (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_gmtoff
			]"
		end

	set_c_tm_gmtoff (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_gmtoff =  (long int)$a_value
			]"
		ensure
			tm_gmtoff_set: a_value = c_tm_gmtoff (an_item)
		end

	c_tm_zone (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_zone
			]"
		end

	set_c_tm_zone (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((struct tm*)$an_item)->tm_zone =  (char const*)$a_value
			]"
		ensure
			tm_zone_set: a_value = c_tm_zone (an_item)
		end

end
