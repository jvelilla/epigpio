note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RAW_WAVE_T_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	gpioon: INTEGER
			-- Access member `gpioOn`
		require
			exists: exists
		do
			Result := c_gpioon (item)
		ensure
			result_correct: Result = c_gpioon (item)
		end

	set_gpioon (a_value: INTEGER) 
			-- Change the value of member `gpioOn` to `a_value`.
		require
			exists: exists
		do
			set_c_gpioon (item, a_value)
		ensure
			gpioon_set: a_value = gpioon
		end

	gpiooff: INTEGER
			-- Access member `gpioOff`
		require
			exists: exists
		do
			Result := c_gpiooff (item)
		ensure
			result_correct: Result = c_gpiooff (item)
		end

	set_gpiooff (a_value: INTEGER) 
			-- Change the value of member `gpioOff` to `a_value`.
		require
			exists: exists
		do
			set_c_gpiooff (item, a_value)
		ensure
			gpiooff_set: a_value = gpiooff
		end

	usdelay: INTEGER
			-- Access member `usDelay`
		require
			exists: exists
		do
			Result := c_usdelay (item)
		ensure
			result_correct: Result = c_usdelay (item)
		end

	set_usdelay (a_value: INTEGER) 
			-- Change the value of member `usDelay` to `a_value`.
		require
			exists: exists
		do
			set_c_usdelay (item, a_value)
		ensure
			usdelay_set: a_value = usdelay
		end

	flags: INTEGER
			-- Access member `flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: INTEGER) 
			-- Change the value of member `flags` to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

feature {NONE} -- Implementation wrapper for struct rawWave_t

	sizeof_external: INTEGER 
		external
			"C inline use <pigpio.h>"
		alias
			"sizeof(rawWave_t)"
		end

	c_gpioon (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->gpioOn
			]"
		end

	set_c_gpioon (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->gpioOn =  (uint32_t)$a_value
			]"
		ensure
			gpioon_set: a_value = c_gpioon (an_item)
		end

	c_gpiooff (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->gpioOff
			]"
		end

	set_c_gpiooff (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->gpioOff =  (uint32_t)$a_value
			]"
		ensure
			gpiooff_set: a_value = c_gpiooff (an_item)
		end

	c_usdelay (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->usDelay
			]"
		end

	set_c_usdelay (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->usDelay =  (uint32_t)$a_value
			]"
		ensure
			usdelay_set: a_value = c_usdelay (an_item)
		end

	c_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <pigpio.h>"
		alias
			"[
				((rawWave_t*)$an_item)->flags =  (uint32_t)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

end
